trigger:
  batch: true
  branches:
    include:
      - linuxIntegration

resources:
  - repo: self

parameters:
  - name: imageTag
    type: string
    default: 'latest'

stages:
  - stage: Maven_Stage
    displayName: Maven Stage
    jobs:
      - job: Maven_Stage
        displayName: Maven Stage
        pool:
          name: Default
        steps:
          - task: ShellScript@2
            displayName: 'Create Jar Files'
            inputs:
              scriptPath: '$(Build.SourcesDirectory)/linux-scripts/buildService.sh'
              arguments: |
                create_jar_file "$(Build.SourcesDirectory)/store-usersubscription-example"
                create_jar_file "$(Build.SourcesDirectory)/store-videogame-products-example"
                create_jar_file "$(Build.SourcesDirectory)/store-videogamestore-final-example"
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.SourcesDirectory)/store-usersubscription-example/target/usersubscription.jar'
              artifact: 'usersubscription.jar'
            displayName: 'Publish Artifact UserSubscription'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.SourcesDirectory)/store-videogame-products-example/target/videogamestore.jar'
              artifact: 'videogamestore.jar'
            displayName: 'Publish Artifact VideogameProducts'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.SourcesDirectory)/store-videogamestore-final-example/target/videogamestorefinal.jar'
              artifact: 'videogamestorefinal.jar'
            displayName: 'Publish Artifact VideogameStore'
  - stage: Build_and_Push_Stage
    displayName: Docker Stage
    jobs:
      - job: Build
        displayName: Docker Stage
        pool:
          name: Default
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifacts'
            inputs:
              buildType: 'current'
              downloadPath: '$(Build.SourcesDirectory)'
              itemPattern: |
                **/store-usersubscription-example/target/usersubscription.jar
                **/store-videogame-products-example/target/videogamestore.jar
                **/store-videogamestore-final-example/target/videogamestorefinal.jar'
          - task: Docker@2
            inputs:
              containerRegistry: 'DockerHub'
              command: 'login'
            displayName: 'Docker Login'
          - task: ShellScript@2
            displayName: 'Build and Push Stage'
            inputs:
              scriptPath: '$(Build.SourcesDirectory)/linux-scripts/buildService.sh'
              arguments: |
                build_and_push_on_docker "$(Build.SourcesDirectory)/store-usersubscription-example" "usersubscription" "${{ parameters.imageTag }}"
                build_and_push_on_docker "$(Build.SourcesDirectory)/store-videogame-products-example" "videogameproducts "${{ parameters.imageTag }}"
                build_and_push_on_docker "$(Build.SourcesDirectory)/store-videogamestore-final-example" "videogameproducts" "${{ parameters.imageTag }}"
          - task: Docker@2
            inputs:
              command: 'logout'
            displayName: 'Docker Logout'
  - stage: Cleanup
    displayName: Cleanup Stage
    dependsOn: Build_And_Push_Stage
    condition: always()
    jobs:
      - job: CleanupJob
        displayName: Cleanup Job
        pool:
          name: Default
        steps:
          - script: |
              if [ "$(isPullRequest)" = true ]; then
                  echo "Pipeline Success"
              else
                  echo "Pipeline Failure"
              fi
            displayName: 'Print Pipeline Status'
          - task: DeleteFiles@1
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)'
              contents: '**'




